# labs(title = "{as.IDate(frame_time)} <i style='color:#CD3700'>{round(as.ITime(frame_time))}</i>")+
# labs(title = 'Date: {frame_time}')+
# shadow_trail(alpha = 0.9,max_frames = 10)+
# transition_states(date_2)+view_static()+
# shadow_mark(colour = 'grey')+
# shadow_wake(1,colour = 'grey92',exclude_phase = c("enter","exit"))+
# enter_recolor(color = "white")+
enter_grow(size = 0.2)+
exit_fade()
alarms_gif <-
gganimate::animate(amin,device = 'ragg_png',renderer = gifski_renderer(),start_pause = 6,width = 500,height = 800,res = 200,detail = 3)
alarms_gif
pal_info <-   wesanderson::wes_palette(name = "FantasticFox1")[c(1,2,4,5)]
# pal_info <-   wesanderson::wes_palette(name = "FantasticFox1")[c(2,4,5)]
# [1] "#DD8D29" "#E2D200"
# [3] "#E58601" "#B40F20"
pal_info %<>% rev()
pal_info[4] <- "#228B22"
p1 <-
map_all_area %>%  ggplot()+ geom_sf(fill = "black")+
# geom_sf(data = df_plot %>% sbt(date %in% first_day),
geom_sf(data = df_plot ,
aes(
size = as.numeric(r),
# color ="transparent",
# color =alpha(fill_color,0.5),
# fill = fill_color,
color =category_desc_en,
fill =category_desc_en,
group =date_2  ),
# group = id  ),
# group = alertDate_2  ),
# color ="white",
shape = 21,
alpha = 0.5,
key_glyph = draw_key_polygon
# show.legend = FALSE
)+
# geom_richtext(data = df_label,aes(geometry = geoms,label = hamas_is_isis),stat = "sf_coordinates",hjust = 0.5,family = "Heebo",fill = NA, label.color = NA,size = 10)+
# scale_fill_identity(aesthetics = c("color","fill"))+
scale_color_manual(values = (pal_info), aesthetics = c("fill"),breaks = vec_category_desc_en)+
scale_color_manual(values = darken(pal_info,amount = 0.3),
aesthetics = c("color"),breaks = vec_category_desc_en)+
# guides()
# scale_color_manual(values = (pal_info), aesthetics = c("fill","color"))+
labs(subtitle = "Israel under attack")+
guides(colour = info_guide,fill =info_guide ,size = "none")+
theme_void(base_size = 18,base_family = "Heebo")+
xlab(hamas_is_isis)+
theme(plot.title = element_markdown(hjust = 0.5,face = "bold",family = "Heebo",margin = unit(c(0, 0, 0, 0), "lines"),padding = unit(c(0.25, 0, 0, 0), "lines")),
plot.subtitle = element_markdown(hjust = 0.5,face = "bold",family = "Heebo",size = 10,margin =unit(c(0, 0, 0, 0), "lines"),padding = unit(c(0, 0, 0, 0), "lines")),
axis.title.x.bottom = element_markdown(hjust = 0.5,face = "bold",family = "Heebo"),
legend.position = c(.3, .035),
legend.justification = c("right", "bottom"))
p1
amin <-
p1+
transition_time(date_2)+
# transition_null()+
# transition_time(alertDate_2)+
# transition_states(date_2, transition_length = 1, state_length =3)+
view_static()+
# labs(title = " <span style='color:#CD3700'>21</span>-10-2023")+
labs(title = " <span style='color:#CD3700'>{mday(frame_time)}</span>-{month(frame_time)}-{year(frame_time)}")+
# labs(title = "Date: <i style='color:#CD3700'>{previous_state}</i>")+
# labs(title = "{as.IDate(previous_state)} <i style='color:#CD3700'>{round(as.ITime(previous_state))}</i>")+
# labs(title = "{as.IDate(frame_time)} <i style='color:#CD3700'>{round(as.ITime(frame_time))}</i>")+
# labs(title = 'Date: {frame_time}')+
# shadow_trail(alpha = 0.9,max_frames = 10)+
# transition_states(date_2)+view_static()+
# shadow_mark(colour = 'grey')+
# shadow_wake(1,colour = 'grey92',exclude_phase = c("enter","exit"))+
# enter_recolor(color = "white")+
enter_grow(size = 0.2)+
exit_fade()
alarms_gif <-
gganimate::animate(amin,device = 'ragg_png',renderer = gifski_renderer(),start_pause = 6,width = 500,height = 800,res = 200,detail = 3)
gganimate::anim_save("output/figures/alarms_gif_13.gif",animation = alarms_gif )
alarms_gif
alarms_gif <-
gganimate::animate(amin,device = 'ragg_png',renderer = gifski_renderer(),start_pause = 8,width = 500,height = 800,res = 200,detail = 3)
# gganimate::animate(amin,device = 'ragg_png',renderer = gifski_renderer(),start_pause = 4,width = 500,height = 700,res = 130,detail = 3)
# gganimate::animate(amin,device = 'ragg_png',renderer = gifski_renderer(),start_pause = 2,width = 1000,height = 1400,res = 130)
# gganimate::animate(amin,device = 'ragg_png',renderer = gifski_renderer(width = 1000,height = 1400))
gganimate::anim_save("output/figures/alarms_gif_14.gif",animation = alarms_gif )
alarms_gif
alarms_gif <-
gganimate::animate(amin,device = 'ragg_png',renderer = gifski_renderer(),start_pause = 7,width = 500,height = 800,res = 200,detail = 3)
# gganimate::animate(amin,device = 'ragg_png',renderer = gifski_renderer(),start_pause = 4,width = 500,height = 700,res = 130,detail = 3)
# gganimate::animate(amin,device = 'ragg_png',renderer = gifski_renderer(),start_pause = 2,width = 1000,height = 1400,res = 130)
# gganimate::animate(amin,device = 'ragg_png',renderer = gifski_renderer(width = 1000,height = 1400))
gganimate::anim_save("output/figures/alarms_gif_15.gif",animation = alarms_gif )
alarms_gif
library(fastverse)
library(polyglotr)
polyglotr::google_translate(text = "היי",source_language = "he")
polyglotr::google_translate(text = "היי",source_language = "he") %>% utf8::as_utf8()
polyglotr::google_translate(text = "היי",source_language = "he") %>% utf8::utf8_encode()
polyglotr::google_translate(text = "היי",source_language = "he") %>% utf8::output_ansi()
polyglotr::google_translate(text = "היי",source_language = "he") %>% utf8::utf8_format()
polyglotr::google_translate(text = "היי",source_language = "he") %>%
utf8ToInt()
polyglotr::google_translate(text = "היי",source_language = "he") %>%
utf8ToInt() %>% intToUtf8
polyglotr::mymemory_translate(text = "היי",source_language = "he")
polyglotr::mymemory_translate(text = "מקור הנתונים",source_language = "he")
he_text <-  polyglotr::mymemory_translate(text = "מקור הנתונים",source_language = "he")
rstudioapi::insertText(text = he_text)
he_tran <- function(polyglotr, mymemory_translate, text, rstudioapi, insertText) {
he_text <-polyglotr::mymemory_translate(text = text,source_language = "he")
rstudioapi::insertText(text = he_text)
}
he_tran("נתונים של אזורי אזעקה")
## utils ------------
he_tran <- function(text) {
he_text <-polyglotr::mymemory_translate(text = text,source_language = "he")
rstudioapi::insertText(text = he_text)
}
he_tran("נתונים של אזורי אזעקה")
he_tran("נתוני אזור של ערים לאלו שלא הופיעו בנתונים הקודמים")
he_tran("אזורי אזעקות של פיקוד העורף")
he_tran("לבחור רק את אלו שמופיעים במקור הראשון")
he_tran("להוסיף מזהה של המתאימים")
he_tran("לפצל את הנתונים לאלו שמופיעים ואלו שלא")
he_tran("ליצור קובץ של הנתונים שמופיעים במקור הראשון")
he_tran("לבדוק התאמות לאלו שלא הופיעו במקור הראשון")
he_tran("לבנות את הקובץ המלא")
he_tran("ליצור")
# Alarm zone sf data  ---------------------
geo_url <- "https://services-eu1.arcgis.com/Vh4Ni8nW38EHDz4d/ArcGIS/rest/services/03112021_Warning_Zones_Targil/FeatureServer/0"
df_geo <- arcpullr::get_spatial_layer(geo_url)
df_geo_sub <- gv(df_geo,c("area_NameLable","Uniq_ID"))
# sf data of cities for those not listed in the previous data ------------------------
Sys.sleep(10)
geo_url_2 <- "https://services-eu1.arcgis.com/Vh4Ni8nW38EHDz4d/ArcGIS/rest/services/ADM_Setl_Insturction_Policy_V/FeatureServer/0"
df_geo_2 <- arcpullr::get_spatial_layer(geo_url_2)
df_geo_2 <- funique(df_geo_2,cols = "SETL_CODE")
df_geo_2_sub <- gv(df_geo_2,c("SETL_NAME"))
# Home Front Command alarm areas ------------------------
cities_mix_url = "https://www.oref.org.il/Shared/Ajax/GetCitiesMix.aspx"
req <- request(cities_mix_url)
library(fastverse)
library(RCurl)
library(httr2)
library(jsonlite)
library(sf)
library(arcpullr)
library(stringdist)
library(ggplot2)
library(qs)
library(anytime)
library(units)
library(foreach)
library(ragg)
library(ggtext)
library(geomtextpath)
library(ggh4x)
library(polyglotr)
# Alarm zone sf data  ---------------------
geo_url <- "https://services-eu1.arcgis.com/Vh4Ni8nW38EHDz4d/ArcGIS/rest/services/03112021_Warning_Zones_Targil/FeatureServer/0"
df_geo <- arcpullr::get_spatial_layer(geo_url)
df_geo_sub <- gv(df_geo,c("area_NameLable","Uniq_ID"))
# sf data of cities for those not listed in the previous data ------------------------
Sys.sleep(10)
23
# Alarm zone sf data  ---------------------
geo_url <- "https://services-eu1.arcgis.com/Vh4Ni8nW38EHDz4d/ArcGIS/rest/services/03112021_Warning_Zones_Targil/FeatureServer/0"
df_geo <- arcpullr::get_spatial_layer(geo_url)
df_geo_sub <- gv(df_geo,c("area_NameLable","Uniq_ID"))
# sf data of cities for those not listed in the previous data ------------------------
Sys.sleep(10)
geo_url_2 <- "https://services-eu1.arcgis.com/Vh4Ni8nW38EHDz4d/ArcGIS/rest/services/ADM_Setl_Insturction_Policy_V/FeatureServer/0"
df_geo_2 <- arcpullr::get_spatial_layer(geo_url_2)
df_geo_2 <- funique(df_geo_2,cols = "SETL_CODE")
df_geo_2_sub <- gv(df_geo_2,c("SETL_NAME"))
# Home Front Command alarm areas ------------------------
cities_mix_url = "https://www.oref.org.il/Shared/Ajax/GetCitiesMix.aspx"
req <- request(cities_mix_url)
resp <- req_perform(req)
df_cities <-
resp %>%
resp_body_string() %>%
jsonlite::fromJSON() %>%
qDT()
# Select only those that appear in the first source -----------------------------------------------
str_name_oref <-  df_cities$label
str_name_geo <- df_geo_sub$area_NameLable
str_match_jw <- stringdist::amatch(str_name_oref,str_name_geo,method = "jw")
str_match_qgram <- stringdist::amatch(str_name_oref,str_name_geo,method = "qgram")
str_match <-
fcoalesce(str_match_jw,str_match_qgram)
# Add matching ID
df_cities[,str_match:=str_match]
df_geo_sub %<>% ftransform(str_match = seq_row(df_geo))
# Split the data into those that appear and those that don't
city_name_oref <-  df_cities$str_match
city_name_geo <- df_geo_sub$str_match
list_names <-  split(city_name_oref,(city_name_oref %in% city_name_geo))
list_df_oref <-  split(df_cities,(city_name_oref %in% city_name_geo))
list_df_geo <-  split(df_geo_sub,(  city_name_geo %in% city_name_oref))
names_in_notin <- function(x) {
if (all(x %chin% c("FALSE" ,"TRUE"))) {
fifelse(x =="FALSE","notin","in")
} else {
x
}
}
names(list_names) %<>% names_in_notin
names(list_df_oref) %<>% names_in_notin
names(list_df_geo) %<>% names_in_notin
# Create a file of the data that appears in the first source ----------------------------
df_in <-
join(list_df_oref$`in`,list_df_geo$`in` ,on = c("str_match"))
df_in %<>% st_as_sf
# Check matches for those who didn't appear in the first source ---------------------------------
df_oref_notin <-  list_df_oref$notin
notin_label <- df_oref_notin$label
str_name_geo2 <- df_geo_2_sub$SETL_NAME
str_match_jw <- stringdist::amatch(notin_label,str_name_geo2,method = "jw")
str_match_qgram <- stringdist::amatch(notin_label,str_name_geo2,method = "qgram")
str_match2 <-
fcoalesce(str_match_jw,str_match_qgram)
df_oref_notin[,str_match:= str_match2]
df_geo_2_sub %<>% ftransform(str_match = seq_row(df_geo_2_sub))
#--------------------------
df_notin <-
join(df_oref_notin ,df_geo_2_sub ,on = c("str_match"),how = "i")
df_notin %<>% st_as_sf
rm(list = ls(pattern = "df_geo"))
gc()
# Build the full file --------------------------
data_names <- intersect(names(df_in),names(df_notin))
df_in %<>% gv(data_names)
df_notin %<>% gv(data_names)
df_alarms_geo <- rowbind(df_in,df_notin)
df_alarms_geo
df_alarms_geo %>% ggplot()+geom_sf()
qsave(df_alarms_geo,"data/inter/Rdata/df_alarms_geo.qs")
ls(pattern = "df")
ls(pattern = "df|in")
ls(pattern = "df|in|str_m")
rm(list = ls(pattern = "df|in|str_m"))
he_tran("מפה של שטח ישראל לא כולל עזה")
he_tran("מפה של כל השטח המאויים בישראל")
# Map of the entire threatened area in Israel
he_tran("כלומר כל שטחי ישראל למעט עזה")
he_tran("היסטוריית אזעקות ")
he_tran("טווח ימים")
resp_more_then <- function(resp, min_length) {
resp_content_length <- resp_header(resp, "Content-Length")
resp_content_length <- as.numeric(resp_content_length)
return(resp_content_length>=min_length)
}
resp_json_as_DT <- function(resp) {
resp  |> resp_body_string() |> fromJSON() |> qDT()
}
get_alarm_history <- function(days_range, language) {
url_alarms_history <-
"https://www.oref.org.il//Shared/Ajax/GetAlarmsHistory.aspx"
req <- request(url_alarms_history)
resp_list <-
foreach(day = days_range) %do%{
print(day)
query_alarms_history <-
list( fromDate = day-1,
toDate = day,
lang=language,
mode=0)
resp <-
req %>%
req_url_query(!!!query_alarms_history) %>%
req_perform()
resp
}
more_then_30 <-
resp_list %>% sapply(resp_more_then,min_length = 30)
resp_list %<>% .[more_then_30]
resp_list %<>%  lapply(resp_json_as_DT)
df_return <-  rowbind(resp_list)
return(df_return)
}
day_list <-  seq.Date(as.Date("2023-10-6"),Sys.Date(),by = 1)
get_alarm_history(day_list,language = "he")
he_tran("להתאים את הפורמטים של העמודות")
# fun ----------------------
resp_more_then <- function(resp, min_length) {
resp_content_length <- resp_header(resp, "Content-Length")
resp_content_length <- as.numeric(resp_content_length)
return(resp_content_length>=min_length)
}
resp_json_as_DT <- function(resp) {
resp  |> resp_body_string() |> fromJSON() |> qDT()
}
get_alarm_history <- function(days_range, language) {
url_alarms_history <-
"https://www.oref.org.il//Shared/Ajax/GetAlarmsHistory.aspx"
req <- request(url_alarms_history)
resp_list <-
foreach(day = days_range) %do%{
print(day)
query_alarms_history <-
list( fromDate = day-1,
toDate = day,
lang=language,
mode=0)
resp <-
req %>%
req_url_query(!!!query_alarms_history) %>%
req_perform()
resp
}
more_then_30 <-
resp_list %>% sapply(resp_more_then,min_length = 30)
resp_list %<>% .[more_then_30]
resp_list %<>%  lapply(resp_json_as_DT)
df_return <-  rowbind(resp_list)
return(df_return)
}
#----------------------------
# add Heebo fint ------------------
windowsFonts(Heebo = windowsFont("TT Heebo"))
# Map of the entire threatened area in Israel -----------
# That is, all of Israel except Gaza
all_area_url <-
"https://services-eu1.arcgis.com/Vh4Ni8nW38EHDz4d/ArcGIS/rest/services/ADM_Insturction_Policy_V/FeatureServer/0"
df_all_area <- arcpullr::get_spatial_layer(all_area_url)
sf_use_s2(FALSE)
map_all_area <-
df_all_area %>%
st_geometry() %>%
st_buffer(dist = 0.00005) %>%
st_union()
sf_use_s2(TRUE)
rm(df_all_area)
# Alarm history  ----------------
day_list <-  seq.Date(as.Date("2023-10-6"),Sys.Date(),by = 1)
df1 <-  get_alarm_history(day_list,language = "he")
df_en <-  get_alarm_history(day_list,language = "en")
df_en %<>% .[,.(category_desc_en = category_desc,category) ]
df_en %<>% funique()
df1<- join(df1,df_en,on = "category")
rm(df_en)
df1[, alertDate :=anytime(alertDate) ]
df1[,days_date := anydate(alertDate)  ]
setorder(df1,alertDate)
df1
he_tran("טעינה של הנתונים הגאוגרפיים")
he_tran("פוליגונים")
he_tran("פוליגונים לעיגולים")
he_tran("לאפשר זיהוי של כמה אזעקות ביום אחר")
library(gganimate)
library(colorspace)
library(wesanderson)
he_tran("ייצירת המפה")
he_tran("ייצירת אנימציה")
styler:::style_selection()
# fun ----------------------
resp_more_then <- function(resp, min_length) {
resp_content_length <- resp_header(resp, "Content-Length")
resp_content_length <- as.numeric(resp_content_length)
return(resp_content_length>=min_length)
}
resp_json_as_DT <- function(resp) {
resp  |> resp_body_string() |> fromJSON() |> qDT()
}
get_alarm_history <- function(days_range, language) {
url_alarms_history <-
"https://www.oref.org.il//Shared/Ajax/GetAlarmsHistory.aspx"
req <- request(url_alarms_history)
resp_list <-
foreach(day = days_range) %do%{
print(day)
query_alarms_history <-
list( fromDate = day-1,
toDate = day,
lang=language,
mode=0)
resp <-
req %>%
req_url_query(!!!query_alarms_history) %>%
req_perform()
resp
}
more_then_30 <-
resp_list %>% sapply(resp_more_then,min_length = 30)
resp_list %<>% .[more_then_30]
resp_list %<>%  lapply(resp_json_as_DT)
df_return <-  rowbind(resp_list)
return(df_return)
}
#----------------------------
# add Heebo fint ------------------
windowsFonts(Heebo = windowsFont("TT Heebo"))
# Map of the entire threatened area in Israel -----------
# That is, all of Israel except Gaza
all_area_url <-
"https://services-eu1.arcgis.com/Vh4Ni8nW38EHDz4d/ArcGIS/rest/services/ADM_Insturction_Policy_V/FeatureServer/0"
df_all_area <- arcpullr::get_spatial_layer(all_area_url)
sf_use_s2(FALSE)
map_all_area <-
df_all_area %>%
st_geometry() %>%
st_buffer(dist = 0.00005) %>%
st_union()
sf_use_s2(TRUE)
rm(df_all_area)
# Alarm history  ----------------
day_list <-  seq.Date(as.Date("2023-10-6"),Sys.Date(),by = 1)
df1 <-  get_alarm_history(day_list,language = "he")
df_en <-  get_alarm_history(day_list,language = "en")
df_en %<>% .[,.(category_desc_en = category_desc,category) ]
df_en %<>% funique()
df1<- join(df1,df_en,on = "category")
rm(df_en)
# Adjust column formats ----------------------------
df1[, alertDate :=anytime(alertDate) ]
df1[,days_date := anydate(alertDate)  ]
setorder(df1,alertDate)
setnames(df1,"data","loc_name")
# Geographic data loading ------------------
df_alarms_geo <-
qread("data/inter/Rdata/df_alarms_geo.qs")
# Polygons to circles ---------------------
df_red_point <- df_alarms_geo
df_red_point %<>% ftransform(area_size =  st_area(geoms))
df_red_point %<>% ftransform(r =  sqrt(area_size/pi))
st_geometry(df_red_point) %<>% st_centroid()
# df_red_point2 <- df_red_point
# st_geometry(df_red_point2) %<>% st_buffer(dist = (df_red_point2$r))
#-----------------------
df_plot <-
join(df1,df_red_point,on =c("loc_name"="label") )
df_plot %<>% st_as_sf(crs = st_crs(df_red_point))
# Allow multiple alarms to be detected another day
set.seed(456)
df_plot <- st_jitter(df_plot)
# Create map ----------------------------
he_tran("ייצירת המפה")
pal_info <-   wes_palette(name = "FantasticFox1")[c(1,2,4,5)]
pal_info %<>% rev()
pal_info[4] <- "#228B22"
# color_pal <-
# colorspace::sequential_hcl(n = 100,palette = "YlOrRd")
#
# set.seed(456)
# df_plot %<>% ftransform( fill_color  = sample(x = color_pal,size = fnrow(df_plot),replace = TRUE))
#-------------------------
map_all_area <- st_transform(map_all_area,st_crs(df_red_point))
#
# matrix_all_area <- st_coordinates(map_all_area)
# min_y <- which.min(matrix_all_area[,2])
# cord_x <- matrix_all_area[min_y,1]
#
# diff_y <- matrix_all_area[,2] %>% frange() %>% diff()
# cord_y <- matrix_all_area[min_y,2]+(diff_y/5)
# rm(matrix_all_area,diff_y,min_y)
hamas_is_isis <-
"#<span style='color:#0c800f'>**Hamas**</span>is<span style='color:#FF0000'>**ISIS**</span>"
# label_point <- c(cord_x, cord_y)
# label_point %<>% st_point()
# label_point %<>% st_sfc(crs = st_crs(df_red_point))
# df_label <- st_sf("hamas_is_isis" =hamas_is_isis,geoms = label_point)
#-------------------------
vec_category_desc_en <-  df_plot$category_desc_en %>% funique()
info_guide <- guide_legend(title = NULL, label.theme = element_text(family = "Heebo", face = "bold", size = 5), keywidth = 0.4, keyheight = 0.4, override.aes = list(alpha = 1))
p1 <-
map_all_area %>% ggplot() +
geom_sf(fill = "black") +
geom_sf(
data = df_plot,
aes(
size = as.numeric(r),
color = category_desc_en,
fill = category_desc_en,
group = days_date
),
shape = 21,
alpha = 0.5,
key_glyph = draw_key_polygon
) +
scale_color_manual(values = (pal_info), aesthetics = c("fill"), breaks = vec_category_desc_en) +
scale_color_manual(
values = darken(pal_info, amount = 0.3),
aesthetics = c("color"), breaks = vec_category_desc_en
) +
labs(subtitle = "Israel under attack") +
guides(colour = info_guide, fill = info_guide, size = "none") +
theme_void(base_size = 18, base_family = "Heebo") +
xlab(hamas_is_isis) +
theme(
plot.title = element_markdown(hjust = 0.5, face = "bold", family = "Heebo", margin = unit(c(0, 0, 0, 0), "lines"), padding = unit(c(0.25, 0, 0, 0), "lines")),
plot.subtitle = element_markdown(hjust = 0.5, face = "bold", family = "Heebo", size = 10, margin = unit(c(0, 0, 0, 0), "lines"), padding = unit(c(0, 0, 0, 0), "lines")),
axis.title.x.bottom = element_markdown(hjust = 0.5, face = "bold", family = "Heebo"),
legend.position = c(.3, .035),
legend.justification = c("right", "bottom")
)
p1
amin <-
p1+
transition_time(days_date)+
view_static()+
labs(title = " <span style='color:#CD3700'>{mday(frame_time)}</span>-{month(frame_time)}-{year(frame_time)}")+
enter_grow(size = 0.2)+
exit_fade()
alarms_gif <-
gganimate::animate(amin,device = 'ragg_png',renderer = gifski_renderer(),start_pause = 7,width = 500,height = 800,res = 200,detail = 3)
alarms_gif
gganimate::anim_save("output/figures/alarms_gif_map.gif",animation = alarms_gif )
gganimate::anim_save("output/figures/alarms_gif_map.gif",animation = alarms_gif )
alarms_gif
rm(list = ls())
gc()
